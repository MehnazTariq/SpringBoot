<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
">

	<!-- Element is used to set the package that contains all classes that the 
		container must scan to detect the Spring beans. -->
	<context:component-scan
		base-package="com.tutorialspoint.jpa.entity,com.tutorialspoint.jpa.dao,com.tutorialspoint.jpa.service" />

	<!-- Element is also used so that Spring is @Transactional-aware and can 
		detect the @Transactional annotations to configure the appropriate beans 
		with transactional behavior -->
	<tx:annotation-driven transaction-manager="txManager" />




	<!-- Element is used to detect the underlying server and choose the transaction 
		manager available for the platform. -->
	<tx:jta-transaction-manager />




	<!-- <bean id="jtaDataSourceBean" class="org.apache.commons.dbcp2.BasicDataSource" -->
	<!-- destroy-method="close"> -->
	<!-- <property name="driverClassName" value="com.mysql.jdbc.Driver" /> -->
	<!-- <property name="url" value="jdbc:mysql://localhost:3306/sptest" /> -->
	<!-- <property name="username" value="root" /> -->
	<!-- <property name="password" value="password" /> -->
	<!-- </bean> -->





	<!-- <bean id="ehcache" -->
	<!-- class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" -->
	<!-- p:config-location="ehcache.xml" p:shared="true" /> -->


	<!-- @Repository =Spring annotation simply tells the Spring container that 
		this class is a persistence repository and needs to have exception translation 
		performed on it -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />


	<!-- By adding a single bean definition the Spring container will act as 
		a JPA container and inject an EnitityManager from your EntityManagerFactory -->

	<beans>

		<bean
			class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />


		<jee:jndi-lookup id="dataSource" jndi-name="jdbc/sptest" />

		<bean id="txManager"
			class="org.springframework.transaction.jta.JtaTransactionManager">


		</bean>



		<bean id="hbAdapterBean"
			class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
			<property name="showSql" value="true"></property>
			<property name="generateDdl" value="true"></property>
			<property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect"></property>
		</bean>

		<bean id="entityManagerFactoryBean"
			class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
			<property name="persistenceXmlLocation">
				<value>META-INF/persistence.xml</value>
			</property>
			<property name="dataSource" ref="jtaDataSourceBean"></property>
			<property name="jpaVendorAdapter" ref="hbAdapterBean"></property>
			<property name="persistenceUnitName" value="HIBERNATE_JPA_JTA" />

		</bean>


		<bean id="entityManager"
			class="org.springframework.orm.jpa.support.SharedEntityManagerBean">
			<property name="entityManagerFactory" ref="entityManagerFactoryBean" />
		</bean>



		<bean id="employeeDAOImplBean" class="com.tutorialspoint.jpa.dao.EmployeeDAOImp" />

		<bean id="employeeServiceImp" class="com.tutorialspoint.jpa.service.EmployeeServiceImp">
			<property name="employeeDaoImp" ref="employeeDAOImplBean" />

		</bean>

	</beans>

</beans>  
