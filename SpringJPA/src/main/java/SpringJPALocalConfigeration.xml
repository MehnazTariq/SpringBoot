<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
   http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-4.3.xsd" >

	<!-- Element is used to set the package that contains all classes that the 
		container must scan to detect the Spring beans. -->
	<context:component-scan
		base-package="com.tutorialspoint.jpa.entity,com.tutorialspoint.jpa.dao,com.tutorialspoint.jpa.service" />

	<!-- Element is also used so that Spring is @Transactional-aware and can 
		detect the @Transactional annotations to configure the appropriate beans 
		with transactional behavior -->
	<tx:annotation-driven transaction-manager="jpaTxnManagerBean" />


	<bean id="entityManager"
		class="org.springframework.orm.jpa.support.SharedEntityManagerBean">
		<property name="entityManagerFactory" ref="entityManagerFactoryBean" />
	</bean>


	<!-- Responsible for creating EntityManagers opening transactions and binding 
		them to the current thread context. -->
	<bean id="jpaTxnManagerBean" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactoryBean"></property>
	</bean>




	<bean id="dataSourceBean"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/sptest"></property>
		<property name="username" value="root"></property>
		<property name="password" value="password"></property>
	</bean>


	<!-- @Repository =Spring annotation simply tells the Spring container that 
		this class is a persistence repository and needs to have exception translation 
		performed on it -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />


	<!-- By adding a single bean definition the Spring container will act as 
		a JPA container and inject an EnitityManager from your EntityManagerFactory -->

	<beans>

		<bean
			class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

		<bean id="hbAdapterBean"
			class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
			<property name="showSql" value="true"></property>
			<property name="generateDdl" value="true"></property>
			<property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect"></property>
		</bean>

		<bean id="entityManagerFactoryBean"
			class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
			<property name="persistenceXmlLocation">
				<value>META-INF/persistence.xml</value>
			</property>
			<property name="dataSource" ref="dataSourceBean"></property>
			<property name="jpaVendorAdapter" ref="hbAdapterBean"></property>
			<property name="persistenceUnitName" value="HIBERNATE_JPA_LOCAL" />
		</bean>



		<bean id="employeeDAOImplBean" class="com.tutorialspoint.jpa.dao.EmployeeDAOImp" />

		<bean id="employeeServiceImp" class="com.tutorialspoint.jpa.service.EmployeeServiceImp">
			<property name="employeeDaoImp" ref="employeeDAOImplBean" />

		</bean>

	</beans>

</beans>  
